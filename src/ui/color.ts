// Softer color palette with reduced saturation
export enum CommentColors {
    RED = "#FF6B6B",        // Soft red (ðŸ”´)
    ORANGE = "#FFB347",     // Soft orange (ðŸŸ )
    YELLOW = "#FFD166",     // Soft yellow (ðŸŸ¡)
    GREEN = "#88D8B0",      // Soft green (ðŸŸ¢)
    BLUE = "#7FB3D5",       // Soft blue (ðŸ”µ)
    PURPLE = "#B8A1D9",     // Soft purple (ðŸŸ£)
    BROWN = "#C4A484",      // Soft brown (ðŸŸ¤)
    BLACK = "#5D5D5D",      // Soft black (âš«)
    WHITE = "#F5F5F5",      // Soft white (âšª)
    GRAY = "#C0C0C0"        // Light gray
}

export const javaColor = {
    "summary": CommentColors.BLUE,       // ðŸ”µ
    "ownership": CommentColors.GREEN,    // ðŸŸ¢
    "expand": CommentColors.YELLOW,      // ðŸŸ¡
    "usage": CommentColors.BROWN,       // ðŸŸ¤
    "pointer": CommentColors.PURPLE,     // ðŸŸ£
    "deprecation": CommentColors.RED,    // ðŸ”´
    "rational": CommentColors.ORANGE     // ðŸŸ 
};

export const pythonColor = {
    "usage": CommentColors.BLUE,         // ðŸ”µ
    "parameters": CommentColors.PURPLE,  // ðŸŸ£
    "development notes": CommentColors.WHITE, // âšª
    "expand": CommentColors.YELLOW,      // ðŸŸ¡
    "summary": CommentColors.BLUE        // ðŸ”µ
};

export const pharoColor = {
    "key implementation points": CommentColors.ORANGE, // ðŸŸ 
    "example": CommentColors.GREEN,      // ðŸŸ¢
    "responsibilities": CommentColors.BLUE, // ðŸ”µ
    "class references": CommentColors.PURPLE, // ðŸŸ£
    "intent": CommentColors.BLUE,        // ðŸ”µ
    "key messages": CommentColors.RED,    // ðŸ”´
    "collaborators": CommentColors.WHITE // âšª
};

export function getColorForType(language: string, type: string): string {
    const colorMap: Record<string, any> = {
        'java': javaColor,
        'python': pythonColor,
        'pharo': pharoColor
    };
    return colorMap[language]?.[type] || CommentColors.GRAY;
}

// Emoji definitions remain the same as before
export const javaEmoji = {
    "summary": "ðŸ”µ",
    "ownership": "ðŸŸ¢",
    "expand": "ðŸŸ¡",
    "usage": "ðŸŸ¤",
    "pointer": "ðŸŸ£",
    "deprecation": "ðŸ”´",
    "rational": "ðŸŸ "
};

export const pythonEmoji = {
    "usage": "ðŸ”µ",
    "parameters": "ðŸŸ£",
    "development notes": "âšª",
    "expand": "ðŸŸ¡",
    "summary": "ðŸ”µ"
};

export const pharoEmoji = {
    "key implementation points": "ðŸŸ ",
    "example": "ðŸŸ¢",
    "responsibilities": "ðŸ”µ",
    "class references": "ðŸŸ£",
    "intent": "ðŸ”µ",
    "key messages": "ðŸ”´",
    "collaborators": "âšª"
};

export function getIconForType(language: string, commentType: [string]): string {
    const iconMap: Record<string, any> = {
        'java': javaEmoji,
        'python': pythonEmoji,
        'pharo': pharoEmoji
    };

    let icon = "";
    commentType.forEach(element => {
        icon += iconMap[language]?.[element] || "âšª";
    });
    return icon;
}